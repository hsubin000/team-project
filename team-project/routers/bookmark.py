{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42d9c582-b1db-47ec-a876-25a43ad0e9f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# routers/bookmark.py\n",
    "\n",
    "from fastapi import APIRouter, Depends, Body, status\n",
    "from sqlalchemy.orm import Session\n",
    "\n",
    "from db import get_db\n",
    "from models.user import User as UserModel\n",
    "from services.bookmark import add_bookmark, list_bookmarks, remove_bookmark\n",
    "from schemas.bookmark import BookmarkCreate, BookmarkOut\n",
    "from routers.auth import read_current_user\n",
    "\n",
    "router = APIRouter(\n",
    "    prefix=\"/bookmarks\",\n",
    "    tags=[\"bookmarks\"],\n",
    ")\n",
    "\n",
    "\n",
    "@router.get(\"/\", response_model=list[BookmarkOut])\n",
    "def get_my_bookmarks(\n",
    "    db: Session = Depends(get_db),\n",
    "    current: UserModel = Depends(read_current_user),\n",
    "):\n",
    "    \"\"\"\n",
    "    현재 로그인한 사용자의 모든 북마크를 반환합니다.\n",
    "    \"\"\"\n",
    "    return list_bookmarks(db, current)\n",
    "\n",
    "\n",
    "@router.post(\n",
    "    \"/\",\n",
    "    response_model=BookmarkOut,\n",
    "    status_code=status.HTTP_201_CREATED,\n",
    ")\n",
    "def create_bookmark(\n",
    "    data: BookmarkCreate = Body(...),           # paper_id, paper_title, paper_link\n",
    "    db: Session = Depends(get_db),\n",
    "    current: UserModel = Depends(read_current_user),\n",
    "):\n",
    "    \"\"\"\n",
    "    즐겨찾기 생성: 받은 paper_id, paper_title, paper_link 를 저장하고,\n",
    "    생성된 Bookmark ORM 객체를 그대로 반환합니다.\n",
    "    \"\"\"\n",
    "    bm = add_bookmark(\n",
    "        db,\n",
    "        current,\n",
    "        data.paper_id,\n",
    "        data.paper_title,\n",
    "        data.paper_link,\n",
    "    )\n",
    "    return bm\n",
    "\n",
    "\n",
    "@router.delete(\"/{bookmark_id}\", status_code=status.HTTP_204_NO_CONTENT)\n",
    "def delete_bookmark(\n",
    "    bookmark_id: int,\n",
    "    db: Session = Depends(get_db),\n",
    "    current: UserModel = Depends(read_current_user),\n",
    "):\n",
    "    \"\"\"\n",
    "    즐겨찾기 삭제: bookmark_id가 현재 유저 소유인지 확인 후 삭제합니다.\n",
    "    \"\"\"\n",
    "    remove_bookmark(db, current, bookmark_id)\n",
    "    return"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
