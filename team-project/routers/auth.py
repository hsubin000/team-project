{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e41e2427-f9eb-469b-b13b-bcad4de3d9cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import timedelta\n",
    "from fastapi import APIRouter, Depends, HTTPException, status\n",
    "from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n",
    "from jose import JWTError, jwt\n",
    "from sqlalchemy.orm import Session\n",
    "\n",
    "from services.auth import (\n",
    "    authenticate_user,\n",
    "    create_access_token,\n",
    "    register_user,\n",
    "    SECRET_KEY,\n",
    "    ALGORITHM,\n",
    "    ACCESS_TOKEN_EXPIRE_MINUTES\n",
    ")\n",
    "from db import get_db\n",
    "from schemas.user import UserCreate, Token, UserOut\n",
    "from models.user import User as UserModel\n",
    "\n",
    "router = APIRouter(tags=[\"auth\"])\n",
    "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/auth/login\")\n",
    "\n",
    "@router.post(\"/signup\", response_model=UserOut, status_code=status.HTTP_201_CREATED)\n",
    "def signup(user_in: UserCreate, db: Session = Depends(get_db)):\n",
    "    existing = db.query(UserModel).filter(UserModel.username == user_in.username).first()\n",
    "    if existing:\n",
    "        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"이미 등록된 사용자입니다.\")\n",
    "    user = register_user(db, user_in)\n",
    "    return user\n",
    "\n",
    "@router.post(\"/login\", response_model=Token)\n",
    "def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n",
    "    user = authenticate_user(db, form_data.username, form_data.password)\n",
    "    if not user:\n",
    "        raise HTTPException(\n",
    "            status_code=status.HTTP_401_UNAUTHORIZED,\n",
    "            detail=\"아이디 또는 비밀번호가 올바르지 않습니다.\",\n",
    "            headers={\"WWW-Authenticate\": \"Bearer\"}\n",
    "        )\n",
    "    expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n",
    "    access_token = create_access_token(\n",
    "        data={\"sub\": user.username}, expires_delta=expires\n",
    "    )\n",
    "    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n",
    "\n",
    "@router.get(\"/me\", response_model=UserOut)\n",
    "def read_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n",
    "    # 토큰에서 사용자명(sub) 추출\n",
    "    try:\n",
    "        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n",
    "        username: str = payload.get(\"sub\")\n",
    "        if username is None:\n",
    "            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"인증 정보를 확인할 수 없습니다.\")\n",
    "    except JWTError:\n",
    "        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"인증 정보를 확인할 수 없습니다.\")\n",
    "    # DB에서 사용자 조회\n",
    "    user = db.query(UserModel).filter(UserModel.username == username).first()\n",
    "    if user is None:\n",
    "        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"사용자를 찾을 수 없습니다.\")\n",
    "    return UserOut.from_orm(user)\n",
    "\n",
    "\n",
    "def get_current_user_model(\n",
    "    token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)\n",
    ") -> UserModel:\n",
    "    try:\n",
    "        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n",
    "        username: str = payload.get(\"sub\")\n",
    "        if username is None:\n",
    "            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"인증 정보를 확인할 수 없습니다.\")\n",
    "    except JWTError:\n",
    "        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"인증 정보를 확인할 수 없습니다.\")\n",
    "    user = db.query(UserModel).filter(UserModel.username == username).first()\n",
    "    if user is None:\n",
    "        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"사용자를 찾을 수 없습니다.\")\n",
    "    return user  # 👈 이게 핵심! UserModel(DB 객체) 반환"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
