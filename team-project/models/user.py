{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8a52241-a165-4065-9b96-8e6c8d35b1e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# models/user.py\n",
    "from sqlalchemy import Column, Integer, String, Boolean, DateTime\n",
    "from sqlalchemy.orm import relationship\n",
    "from db import Base\n",
    "from datetime import datetime\n",
    "\n",
    "class User(Base):\n",
    "    __tablename__ = \"users\"\n",
    "\n",
    "    id              = Column(Integer, primary_key=True, index=True)\n",
    "    username        = Column(String(50), unique=True, index=True, nullable=False)\n",
    "    nickname        = Column(String(50), nullable=True)\n",
    "    hashed_password = Column(String, nullable=False)\n",
    "    is_active       = Column(Boolean, default=True)\n",
    "    created_at      = Column(DateTime, default=datetime.utcnow)\n",
    "\n",
    "    # relationship to bookmarks\n",
    "    bookmarks       = relationship('Bookmark', back_populates='user', cascade='all, delete-orphan')\n",
    "\n",
    "\n",
    "# services/auth.py\n",
    "import os\n",
    "from datetime import datetime, timedelta\n",
    "from typing import Optional\n",
    "\n",
    "from jose import JWTError, jwt\n",
    "from passlib.context import CryptContext\n",
    "from sqlalchemy.orm import Session\n",
    "\n",
    "from models.user import User as UserModel\n",
    "from schemas.user import UserCreate, UserInDB\n",
    "\n",
    "SECRET_KEY = os.getenv(\"SECRET_KEY\", \"your-secret-key\")\n",
    "ALGORITHM = os.getenv(\"ALGORITHM\", \"HS256\")\n",
    "ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", 60))\n",
    "\n",
    "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n",
    "\n",
    "\n",
    "def get_password_hash(password: str) -> str:\n",
    "    return pwd_context.hash(password)\n",
    "\n",
    "\n",
    "def verify_password(plain_password: str, hashed_password: str) -> bool:\n",
    "    return pwd_context.verify(plain_password, hashed_password)\n",
    "\n",
    "\n",
    "def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:\n",
    "    to_encode = data.copy()\n",
    "    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))\n",
    "    to_encode.update({\"exp\": expire})\n",
    "    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n",
    "\n",
    "\n",
    "def register_user(db: Session, user_create: UserCreate) -> UserInDB:\n",
    "    hashed_password = get_password_hash(user_create.password)\n",
    "    user = UserModel(\n",
    "        username=user_create.username,\n",
    "        hashed_password=hashed_password,\n",
    "        is_active=True,\n",
    "        created_at=datetime.utcnow()\n",
    "    )\n",
    "    db.add(user)\n",
    "    db.commit()\n",
    "    db.refresh(user)\n",
    "    return UserInDB.from_orm(user)\n",
    "\n",
    "\n",
    "def authenticate_user(db: Session, username: str, password: str) -> Optional[UserInDB]:\n",
    "    user = db.query(UserModel).filter(UserModel.username == username).first()\n",
    "    if not user or not verify_password(password, user.hashed_password):\n",
    "        return None\n",
    "    return UserInDB.from_orm(user)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
