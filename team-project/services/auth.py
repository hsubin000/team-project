{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c413e47d-caed-4585-8fa0-46f447d2c0f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# services/auth.py\n",
    "import os\n",
    "from datetime import datetime, timedelta\n",
    "from typing import Optional\n",
    "\n",
    "from jose import JWTError, jwt\n",
    "from passlib.context import CryptContext\n",
    "from sqlalchemy.orm import Session\n",
    "\n",
    "from models.user import User as UserModel\n",
    "from schemas.user import UserCreate, UserInDB, UserUpdate, UserPasswordChange, UserOut\n",
    "\n",
    "# 환경 변수로부터 비밀키와 알고리즘 로드\n",
    "SECRET_KEY = os.getenv(\"SECRET_KEY\", \"your-secret-key\")\n",
    "ALGORITHM = os.getenv(\"ALGORITHM\", \"HS256\")\n",
    "ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", 60))\n",
    "\n",
    "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n",
    "\n",
    "\n",
    "def get_password_hash(password: str) -> str:\n",
    "    return pwd_context.hash(password)\n",
    "\n",
    "\n",
    "def verify_password(plain_password: str, hashed_password: str) -> bool:\n",
    "    return pwd_context.verify(plain_password, hashed_password)\n",
    "\n",
    "\n",
    "def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:\n",
    "    to_encode = data.copy()\n",
    "    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))\n",
    "    to_encode.update({\"exp\": expire})\n",
    "    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n",
    "\n",
    "\n",
    "def register_user(db: Session, user_create: UserCreate) -> UserModel:\n",
    "    hashed_password = get_password_hash(user_create.password)\n",
    "    user = UserModel(\n",
    "        username=user_create.username,\n",
    "        hashed_password=hashed_password,\n",
    "        is_active=True,\n",
    "        created_at=datetime.utcnow()\n",
    "    )\n",
    "    db.add(user)\n",
    "    db.commit()\n",
    "    db.refresh(user)\n",
    "    return user\n",
    "\n",
    "\n",
    "def authenticate_user(db: Session, username: str, password: str) -> Optional[UserInDB]:\n",
    "    user = db.query(UserModel).filter(UserModel.username == username).first()\n",
    "    if not user or not verify_password(password, user.hashed_password):\n",
    "        return None\n",
    "    return UserInDB.from_orm(user)\n",
    "\n",
    "\n",
    "def update_profile(db: Session, user: UserModel, data: UserUpdate) -> UserModel:\n",
    "    if data.username:\n",
    "        user.username = data.username\n",
    "    if data.nickname is not None:\n",
    "        user.nickname = data.nickname\n",
    "    db.commit()\n",
    "    db.refresh(user)\n",
    "    return user\n",
    "\n",
    "\n",
    "def delete_user(db: Session, user: UserModel, hard: bool = False):\n",
    "    if hard:\n",
    "        db.delete(user)\n",
    "    else:\n",
    "        user.is_active = False\n",
    "    db.commit()\n",
    "\n",
    "def change_password(db: Session, user: UserInDB, passwords: UserPasswordChange) -> UserOut:\n",
    "    # 1. 현재 비밀번호 검증\n",
    "    if not verify_password(passwords.current_password, user.hashed_password):\n",
    "        raise ValueError(\"현재 비밀번호가 일치하지 않습니다.\")\n",
    "    # 2. 새 비밀번호로 변경\n",
    "    hashed = get_password_hash(passwords.new_password)\n",
    "    db_user = db.query(UserModel).filter(UserModel.id == user.id).first()\n",
    "    db_user.hashed_password = hashed\n",
    "    db.commit()\n",
    "    db.refresh(db_user)\n",
    "    return UserOut.from_orm(db_user)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
