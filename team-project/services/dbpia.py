{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48623917-ea6d-474f-88ae-568a5a11dedd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# services/dbpia.py\n",
    "\n",
    "import os\n",
    "import re\n",
    "import requests\n",
    "import xml.etree.ElementTree as ET\n",
    "from models.paper import Recommendation, RecommendationResponse\n",
    "\n",
    "# 환경변수에서 API 키 읽기\n",
    "API_KEY = os.getenv(\"DBPIA_API_KEY\")\n",
    "if not API_KEY:\n",
    "    raise RuntimeError(\"DBPIA_API_KEY 환경변수가 설정되지 않았습니다.\")\n",
    "\n",
    "# DBpia XML API 엔드포인트\n",
    "DBPIA_URL = \"http://api.dbpia.co.kr/v2/search/search.xml\"\n",
    "\n",
    "\n",
    "def fetch_recommendations(\n",
    "    pyear: str = \"\",\n",
    "    pmonth: str = \"\",\n",
    "    category: str = \"\",\n",
    "    page: int = 1,\n",
    "    per_page: int = 20,\n",
    ") -> RecommendationResponse:\n",
    "    \"\"\"\n",
    "    DBpia API를 호출하여 추천 논문 데이터를 가져옵니다.\n",
    "\n",
    "    :param pyear: 연도(YYYY)\n",
    "    :param pmonth: 월(MM)\n",
    "    :param category: 주제 코드\n",
    "    :param page: 페이지 번호 (1부터 시작)\n",
    "    :param per_page: 페이지당 결과 수\n",
    "    :return: RecommendationResponse 객체\n",
    "    \"\"\"\n",
    "    # 1) 파라미터 설정\n",
    "    params = {\n",
    "        \"key\": API_KEY,\n",
    "        \"target\": \"rated_art\",\n",
    "        \"page\": str(page),\n",
    "        \"perPage\": str(per_page),\n",
    "    }\n",
    "    if pyear:\n",
    "        params.update({\"pyear\": pyear, \"pmonth\": pmonth})\n",
    "    if category:\n",
    "        params[\"category\"] = category\n",
    "\n",
    "    # 2) API 호출 (타임아웃 설정)\n",
    "    resp = requests.get(DBPIA_URL, params=params, timeout=5)\n",
    "    resp.raise_for_status()\n",
    "\n",
    "    # 3) XML 파싱\n",
    "    root = ET.fromstring(resp.text)\n",
    "    if root.tag == \"error\":\n",
    "        code = root.findtext(\".//Code\") or \"Unknown\"\n",
    "        # E0016: 검색 결과 없음 → 빈 응답\n",
    "        if code == \"E0016\":\n",
    "            return RecommendationResponse(\n",
    "                totalcount=0,\n",
    "                pyymm=None,\n",
    "                recommendations=[]\n",
    "            )\n",
    "        # 그 외 오류는 예외로 처리\n",
    "        raise RuntimeError(f\"DBpia 오류 코드: {code}\")\n",
    "\n",
    "    # 4) 데이터 추출\n",
    "    totalcount = int(root.findtext(\".//totalcount\") or 0)\n",
    "    pyymm = root.findtext(\".//pyymm\")\n",
    "\n",
    "    items = []\n",
    "    for node in root.findall(\".//item\"):\n",
    "        # link_api 에서 nodeId 또는 id=NODE##### 값 추출\n",
    "        link_api = node.findtext(\"link_api\") or \"\"\n",
    "        node_id = None\n",
    "        # 1) nodeId=12345 형태\n",
    "        m = re.search(r\"nodeId=(\\d+)\", link_api)\n",
    "        if m:\n",
    "            node_id = int(m.group(1))\n",
    "        else:\n",
    "            # 2) id=NODE12345 형태\n",
    "            m2 = re.search(r\"id=NODE(\\d+)\", link_api)\n",
    "            if m2:\n",
    "                node_id = int(m2.group(1))\n",
    "\n",
    "        # authors 파싱\n",
    "        authors = []\n",
    "        ap = node.find(\"authors\")\n",
    "        if ap is not None:\n",
    "            for a in ap.findall(\"author\"):\n",
    "                name = a.get(\"name\") or a.findtext(\"name\")\n",
    "                if name:\n",
    "                    authors.append({\n",
    "                        \"order\": int(a.get(\"order\")) if a.get(\"order\") else None,\n",
    "                        \"url\": a.get(\"url\"),\n",
    "                        \"name\": name\n",
    "                    })\n",
    "            # 단순 텍스트로 콤마 구분된 경우\n",
    "            if not authors and ap.text:\n",
    "                for nm in ap.text.split(\",\"):\n",
    "                    nm = nm.strip()\n",
    "                    if nm:\n",
    "                        authors.append({\"order\": None, \"url\": None, \"name\": nm})\n",
    "\n",
    "        # publisher 파싱\n",
    "        pubr = node.find(\"publisher\")\n",
    "        publisher = {\n",
    "            \"url\": (pubr.get(\"url\") if pubr is not None else None) or (pubr.findtext(\"url\") if pubr is not None else None),\n",
    "            \"name\": (pubr.get(\"name\") if pubr is not None else None) or (pubr.findtext(\"name\") if pubr is not None else None)\n",
    "        }\n",
    "\n",
    "        # publication 파싱\n",
    "        publ = node.find(\"publication\")\n",
    "        publication = {\n",
    "            \"url\": (publ.get(\"url\") if publ is not None else None) or (publ.findtext(\"url\") if publ is not None else None),\n",
    "            \"name\": (publ.get(\"name\") if publ is not None else None) or (publ.findtext(\"name\") if publ is not None else None)\n",
    "        }\n",
    "\n",
    "        # item 정보 구성 (실제 논문 식별자 포함)\n",
    "        items.append({\n",
    "            \"id\": node_id,\n",
    "            \"paper_id\": node_id,\n",
    "            \"title\": node.findtext(\"title\"),\n",
    "            \"authors\": authors,\n",
    "            \"publisher\": publisher,\n",
    "            \"publication\": publication,\n",
    "            \"issue_yymm\": node.findtext(\"issue_yymm\"),\n",
    "            \"pages\": node.findtext(\"pages\"),\n",
    "            \"free_yn\": node.findtext(\"free_yn\"),\n",
    "            \"price\": node.findtext(\"price\"),\n",
    "            \"preview_yn\": node.findtext(\"preview_yn\"),\n",
    "            \"preview\": node.findtext(\"preview\"),\n",
    "            \"link_url\": node.findtext(\"link_url\"),\n",
    "            \"link_api\": link_api\n",
    "        })\n",
    "\n",
    "    # 5) Pydantic 모델로 변환하여 반환\n",
    "    recs = [Recommendation(**item) for item in items]\n",
    "    return RecommendationResponse(\n",
    "        totalcount=totalcount,\n",
    "        pyymm=pyymm,\n",
    "        recommendations=recs\n",
    "    )\n",
    "\n",
    "def fetch_paper_by_id(paper_id: int) -> dict | None:\n",
    "    \"\"\"\n",
    "    paper_id(nodeId)로 논문 하나를 조회해 {paper_id, title} 반환.\n",
    "    실패 시 None.\n",
    "    \"\"\"\n",
    "    params = {\n",
    "        \"key\": API_KEY,\n",
    "        \"target\": \"rated_art\",\n",
    "        \"nodeId\": str(paper_id),\n",
    "        \"perPage\": \"1\",\n",
    "    }\n",
    "    resp = requests.get(DBPIA_URL, params=params, timeout=5)\n",
    "    resp.raise_for_status()\n",
    "    root = ET.fromstring(resp.text)\n",
    "    item = root.find(\".//item\")\n",
    "    if item is None:\n",
    "        return None\n",
    "    title = item.findtext(\"title\", \"\").strip() or f\"Paper #{paper_id}\"\n",
    "    return { \"paper_id\": paper_id, \"title\": title }"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
