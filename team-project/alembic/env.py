{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90fcb8b4-4f61-4c45-8b74-d7766ba6473d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# alembic/env.py\n",
    "\n",
    "import sys\n",
    "import os\n",
    "from logging.config import fileConfig\n",
    "\n",
    "from sqlalchemy import engine_from_config, pool\n",
    "from alembic import context\n",
    "\n",
    "# 1) alembic 디렉터리 기준으로 프로젝트 루트(한 단계 위)를 sys.path에 추가\n",
    "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\")))\n",
    "\n",
    "# 2) Alembic 설정 로드\n",
    "config = context.config\n",
    "if config.config_file_name is not None:\n",
    "    fileConfig(config.config_file_name)\n",
    "\n",
    "# 3) SQLAlchemy Base 와 모델들을 임포트\n",
    "from db import Base                   # db.py 에서 선언된 Base\n",
    "import models.paper                    # Paper 모델\n",
    "import models.user                     # User 모델\n",
    "# 만약 favorites/comments 모델도 있다면 여기에 추가로 import\n",
    "# import models.favorite\n",
    "# import models.comment\n",
    "\n",
    "# 4) 자동 생성 시 참조할 메타데이터\n",
    "target_metadata = Base.metadata\n",
    "\n",
    "# --------------------------------------------------------------------\n",
    "\n",
    "def run_migrations_offline() -> None:\n",
    "    \"\"\"Run migrations in 'offline' mode.\"\"\"\n",
    "    url = config.get_main_option(\"sqlalchemy.url\")\n",
    "    context.configure(\n",
    "        url=url,\n",
    "        target_metadata=target_metadata,\n",
    "        literal_binds=True,\n",
    "        dialect_opts={\"paramstyle\": \"named\"},\n",
    "    )\n",
    "    with context.begin_transaction():\n",
    "        context.run_migrations()\n",
    "\n",
    "\n",
    "def run_migrations_online() -> None:\n",
    "    \"\"\"Run migrations in 'online' mode.\"\"\"\n",
    "    connectable = engine_from_config(\n",
    "        config.get_section(config.config_ini_section, {}),\n",
    "        prefix=\"sqlalchemy.\",\n",
    "        poolclass=pool.NullPool,\n",
    "    )\n",
    "    with connectable.connect() as connection:\n",
    "        context.configure(\n",
    "            connection=connection, \n",
    "            target_metadata=target_metadata\n",
    "        )\n",
    "        with context.begin_transaction():\n",
    "            context.run_migrations()\n",
    "\n",
    "\n",
    "if context.is_offline_mode():\n",
    "    run_migrations_offline()\n",
    "else:\n",
    "    run_migrations_online()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
